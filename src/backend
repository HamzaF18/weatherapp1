from fastapi import FastAPI, HTTPException 

from pydantic import BaseModel 

from fastapi.middleware.cors import CORSMiddleware 

 
 

app = FastAPI() 

 
 

app.add_middleware( 

    CORSMiddleware, 

    allow_origins=["*"],  # Adjust this to your frontend URL in production 

    allow_credentials=True, 

    allow_methods=["GET", "POST", "PUT", "DELETE"], 

    allow_headers=["*"], 

) 

 
 
 
 
 
 

# Fake user database 

fake_users_db = { 

    "user1": { 

        "username": "user1", 

        "password": "password1", 

        "email": "user1@example.com", 

    }, 

    "user2": { 

        "username": "user2", 

        "password": "password2", 

        "email": "user2@example.com", 

    } 

} 

 
 

# Pydantic model for user sign-in request 

class SignInRequest(BaseModel): 

    username: str 

    password: str 

 
 

# Route for user sign-in 

@app.post("/signin/") 

async def sign_in(sign_in_request: SignInRequest): 

    user = fake_users_db.get(sign_in_request.username) 

    if not user or user["password"] != sign_in_request.password: 

        raise HTTPException(status_code=401, detail="Incorrect username or password") 

    return {"message": "Sign in successful", "user": user} 

 
 

if __name__ == "__main__": 

    import uvicorn 

    uvicorn.run(app, host="0.0.0.0", port=8000) 
